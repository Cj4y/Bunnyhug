import React from 'react'
import ReactDOM from 'react-dom'

import axios from 'axios'

import Listings from './Listings'
import Listing from './Listing'
import ListingForm from './ListingForm'
import Spinner from './Spinner'
import ErrorMessage from './ErrorMessage'

class ListingApp extends React.Component {
    constructor(props) {
        super(props)
        this.state = {
            listings: [],
            hideInactiveListings: false,
            isLoading: true,
            errorMessage: null,
        }
        this.getListings= this.getListings.bind(this)
        this.createListing = this.createListing.bind(this)
        this.toggleInactiveListings= this.toggleInactiveListings.bind(this)
        this.handleErrors = this.handleErrors.bind(this)
        this.clearErrors = this.clearErrors.bind(this)
    }
    //load ListingApp component after getter
    componentDidMount() {
        this.getListings()
    }
    //request items at index /api/v1/listings
    getListings() {
      
    //if successful, load data into state
        axios
            .get('/api/v1/listings') //or "/broken-end-point"
            .then(response => { 
                this.clearErrors()
                this.setState({ isLoading: true })
                const listings = response.data  //bind to the data
                this.setState({ listings })
                this.setState({ isLoading: false })
            })
            .catch(error => {
                this.setState({ isLoading: true })
                this.setState({
                    errorMessage: {
                        message:
                            'There was an error loading your listings...',
                    },
                })
            })
    }
    createListing(listing) {
        const listings = [listing, ...this.state.listings]
        this.setState({ listings })
    }
    toggleInactiveListings() {
        this.setState({
            hideInactiveListings: !this.state.hideInactiveListings,
        })
    }
    handleErrors(errorMessage) {
        this.setState({ errorMessage })
    }
    clearErrors() {
        this.setState({
            errorMessage: null,
        })
    }
    render() {
      //render the listing by mapping over each listing in state, passing unique key id generated by rails
      //render listingForm, createListing
        return (
            <>
                {this.state.errorMessage && (
                    <ErrorMessage errorMessage={this.state.errorMessage} />
                )}
                {!this.state.isLoading && (
                    <>
                        <ListingForm 
                            createListing={this.createListing}
                            handleErrors={this.handleErrors}
                            clearErrors={this.clearErrors}
                        />
                        <Listings
                            toggleInactiveListings={
                                this.toggleInactiveListings
                            }
                            hideInactiveListings={
                                this.state.hideInactiveListings
                            }
                        >
                            {this.state.listings.map(listing => (
                                <Listing
                                    key={listing.id}
                                    listing={listing}
                                    getListings={this.getListings} //add this prop to the component Listing to update state
                                    hideInactiveListings={
                                        this.state.hideInactiveListings
                                    }
                                    handleErrors={this.handleErrors}
                                    clearErrors={this.clearErrors}
                                />
                            ))}
                        </Listings>
                    </>
                )}
                {this.state.isLoading && <Spinner />}
            </>
        )
    }
}
document.addEventListener('turbo:load', () => {
    const app = document.getElementById('listing-app')
    app && ReactDOM.render(<ListingApp />, app)
})